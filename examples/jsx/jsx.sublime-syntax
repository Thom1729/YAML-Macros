%YAML 1.2
---
contexts:
  anonymous-function:
  - match: (?={{func_lookahead}})
    set:
    - meta_content_scope: meta.function.anonymous.js
    - include: function-declaration
  - match: (?={{arrow_func_lookahead}})
    set:
    - meta_content_scope: meta.function.anonymous.js
    - include: arrow-function-declaration
  array-literal:
  - match: \[
    scope: punctuation.section.brackets.js
    set:
    - meta_scope: meta.sequence.js
    - match: \]
      pop: true
      scope: punctuation.section.brackets.js
    - include: expression-list
  arrow-function-concise-body:
  - meta_content_scope: meta.block.js
  - match: (?=[);}\],])
    pop: true
  - match: \n
    set: arrow-function-concise-continuation
  - match: //
    scope: punctuation.definition.comment.js
    set:
    - meta_scope: comment.line.double-slash.js
    - match: \n
      set: arrow-function-concise-continuation
  - match: (?=\S)
    push: expression-no-comma
  arrow-function-concise-continuation:
  - match: (?=^\s*(\.|/[/*]))
    set: arrow-function-concise-body
  - match: (?=.|\n)
    pop: true
  arrow-function-declaration:
  - captures:
      1: storage.type.function.arrow.js
    match: \s*(=>)\s*(?=\n|//|/*)
    scope: meta.function.declaration.js
    set: arrow-function-declaration-continuation
  - captures:
      1: storage.type.function.arrow.js
    match: \s*(=>)(?=\s*\{)
    scope: meta.function.declaration.js
    set: function-block
  - captures:
      1: meta.function.declaration.js
      2: storage.type.function.arrow.js
    match: (\s*(=>))\s*(?=\S)
    set: arrow-function-concise-body
  - captures:
      1: storage.type.js
    match: \b(async)\b\s*
    scope: meta.function.declaration.js
  - match: '{{identifier}}'
    scope: meta.function.declaration.js variable.parameter.function.js
  - include: function-declaration-parameters
  arrow-function-declaration-continuation:
  - meta_content_scope: meta.function.declaration.js
  - match: (?=\{)
    set: function-block
  - match: (?=\S)
    set: arrow-function-concise-body
  binary-operators:
  - match: \binstanceof\b
    push: expression-begin
    scope: keyword.operator.js
  - match: \b(in|of)\b
    push: expression-begin
    scope: keyword.operator.js
  - match: '&&|\|\|'
    push: expression-begin
    scope: keyword.operator.logical.js
  - match: =(?![=>])
    push: expression-begin
    scope: keyword.operator.assignment.js
  - match: '(?x)

      %=   | # assignment      right-to-left   both

      &=   | # assignment      right-to-left   both

      \*=  | # assignment      right-to-left   both

      \+=  | # assignment      right-to-left   both

      -=   | # assignment      right-to-left   both

      /=   | # assignment      right-to-left   both

      \^=  | # assignment      right-to-left   both

      \|=  | # assignment      right-to-left   both

      <<=  | # assignment      right-to-left   both

      >>=  | # assignment      right-to-left   both

      >>>=   # assignment      right-to-left   both'
    push: expression-begin
    scope: keyword.operator.assignment.augmented.js
  - match: '(?x)

      <<   | # bitwise-shift   left-to-right   both

      >>>  | # bitwise-shift   left-to-right   both

      >>   | # bitwise-shift   left-to-right   both

      &    | # bitwise-and     left-to-right   both

      \^   | # bitwise-xor     left-to-right   both

      \|     # bitwise-or      left-to-right   both'
    push: expression-begin
    scope: keyword.operator.bitwise.js
  - match: '(?x)

      <=   | # relational      left-to-right   both

      >=   | # relational      left-to-right   both

      <    | # relational      left-to-right   both

      >      # relational      left-to-right   both'
    push: expression-begin
    scope: keyword.operator.relational.js
  - match: '(?x)

      ===  | # equality        left-to-right   both

      !==  | # equality        left-to-right   both

      ==   | # equality        left-to-right   both

      !=     # equality        left-to-right   both'
    push: expression-begin
    scope: keyword.operator.comparison.js
  - match: '(?x)

      /    | # division        left-to-right   both

      %    | # modulus         left-to-right   both

      \*   | # multiplication  left-to-right   both

      \+   | # addition        left-to-right   both

      -      # subtraction     left-to-right   both'
    push: expression-begin
    scope: keyword.operator.arithmetic.js
  block-scope:
  - match: \{
    push:
    - meta_scope: meta.block.js
    - match: \}
      pop: true
      scope: punctuation.section.block.js
    - include: statements
    scope: punctuation.section.block.js
  - include: else-pop
  bracketed-property-access:
  - match: \[
    push:
    - meta_scope: meta.brackets.js
    - match: \]
      pop: true
      scope: punctuation.section.brackets.js
    - match: (?=\S)
      push: expression
    scope: punctuation.section.brackets.js
  class:
  - match: \bclass\b
    scope: storage.type.class.js
    set:
    - meta_scope: meta.class.js
    - match: \{
      scope: punctuation.section.block.js
      set: class-body
    - captures:
        1: storage.modifier.extends.js
      match: \b(extends)\b\s+(?={{identifier}})
      push:
      - match: '{{identifier}}'
        scope: entity.other.inherited-class.js
      - match: \.
        scope: punctuation.accessor.js
      - include: else-pop
    - match: '{{identifier}}'
      scope: entity.name.class.js
  class-body:
  - meta_scope: meta.class.js meta.block.js
  - match: \}
    pop: true
    scope: punctuation.section.block.js
  - include: method-declaration
  comma-separator:
  - match: ','
    scope: punctuation.separator.comma.js
  comments:
  - match: /\*\*(?!/)
    push:
    - meta_include_prototype: false
    - meta_scope: comment.block.documentation.js
    - match: \*/
      pop: true
      scope: punctuation.definition.comment.js
    scope: punctuation.definition.comment.js
  - match: /\*
    push:
    - meta_include_prototype: false
    - meta_scope: comment.block.js
    - match: \*/
      pop: true
      scope: punctuation.definition.comment.js
    scope: punctuation.definition.comment.js
  - match: //
    push:
    - meta_include_prototype: false
    - meta_scope: comment.line.double-slash.js
    - match: \n
      pop: true
    scope: punctuation.definition.comment.js
  comments-top-level:
  - captures:
      1: punctuation.definition.comment.js
    match: ^(#!).*$\n?
    scope: comment.line.shebang.js
  conditional:
  - match: \bswitch\b
    push:
    - meta_scope: meta.switch.js
    - match: (?=\()
      push: parenthesized-expression
    - match: \}
      pop: true
      scope: meta.block.js punctuation.section.block.js
    - match: \{
      push:
      - meta_scope: meta.block.js
      - match: (?=\})
        pop: true
      - match: \b(case)\b
        push:
        - expect-case-colon
        - expression
        scope: keyword.control.switch.js
      - match: \b(default)\b
        push:
        - expect-case-colon
        scope: keyword.control.switch.js
      - include: statements
      scope: punctuation.section.block.js
    scope: keyword.control.switch.js
  - match: \bdo\b
    push:
    - meta_scope: meta.do-while.js
    - match: \{
      push:
      - meta_scope: meta.block.js
      - match: \}
        pop: true
        scope: punctuation.section.block.js
      - include: statements
      scope: punctuation.section.block.js
    - match: \bwhile\b
      scope: keyword.control.loop.js
    - match: \(
      push:
      - meta_scope: meta.group.js
      - match: (?=\))
        pop: true
      - match: (?=\S)
        push: expression
      scope: punctuation.section.group.js
    - match: \)
      pop: true
      scope: meta.group.js punctuation.section.group.js
    scope: keyword.control.loop.js
  - match: \bfor\b
    push:
    - meta_scope: meta.for.js
    - include: parens-block-scope
    scope: keyword.control.loop.js
  - match: \bwhile\b
    push:
    - meta_scope: meta.while.js
    - include: parens-block-scope
    scope: keyword.control.loop.js
  - match: \bwith\b
    push:
    - meta_scope: meta.with.js
    - include: parens-block-scope
    scope: keyword.control.with.js
  - match: \b(else\s+if|if)\b
    push:
    - meta_scope: meta.conditional.js
    - include: parens-block-scope
    scope: keyword.control.conditional.js
  - match: \belse\b
    push:
    - meta_scope: meta.conditional.js
    - include: block-scope
    scope: keyword.control.conditional.js
  - match: \btry\b
    push:
    - meta_scope: meta.try.js
    - include: block-scope
    scope: keyword.control.trycatch.js
  - match: \bfinally\b
    push:
    - meta_scope: meta.finally.js
    - include: block-scope
    scope: keyword.control.trycatch.js
  - match: \bcatch\b
    push:
    - meta_scope: meta.catch.js
    - include: parens-block-scope
    scope: keyword.control.trycatch.js
  constants:
  - match: \btrue\b
    pop: true
    scope: constant.language.boolean.true.js
  - match: \bfalse\b
    pop: true
    scope: constant.language.boolean.false.js
  - match: \bnull\b
    pop: true
    scope: constant.language.null.js
  - match: \bundefined\b
    pop: true
    scope: constant.language.undefined.js
  - match: \bNaN\b
    pop: true
    scope: constant.language.nan.js
  constructor:
  - match: \bnew\b
    scope: keyword.operator.word.new.js
    set:
    - meta-constructor
    - constructor-name
  constructor-name:
  - match: (?=function\b)
    set:
    - constructor-params
    - function-declaration
  - match: (?=class\b)
    set:
    - constructor-params
    - class
  - match: (?={{identifier}})
    set:
    - - meta_scope: meta.function-call.constructor.js
      - include: else-pop
    - constructor-params
    - - include: well-known-identifiers
      - include: language-identifiers
      - match: '{{dollar_only_identifier}}'
        scope: variable.type.dollar.only.js punctuation.dollar.js
      - captures:
          1: punctuation.dollar.js
        match: '{{dollar_identifier}}'
        scope: variable.type.dollar.js
      - match: '{{identifier}}'
        scope: variable.type.js
      - match: \.
        scope: punctuation.accessor.js
      - include: bracketed-property-access
      - match: (?=\S|$)
        pop: true
  - match: \(
    scope: punctuation.section.group.js
    set:
    - - meta_scope: meta.function-call.constructor.js
      - include: else-pop
    - constructor-params
    - - meta_scope: meta.group.js
      - match: \)
        pop: true
        scope: punctuation.section.group.js
    - expression
  - include: else-pop
  constructor-params:
  - meta_content_scope: meta.instance.constructor.js
  - match: (?=\()
    push:
    - meta_scope: meta.function-call.constructor.js
    - include: function-call-params
  - include: else-pop
  dollar-identifiers:
  - match: '{{dollar_only_identifier}}'
    pop: true
    scope: variable.other.dollar.only.js punctuation.dollar.js
  - captures:
      1: punctuation.dollar.js
    match: '{{dollar_identifier}}'
    pop: true
    scope: variable.other.dollar.js
  either-function-declaration:
  - match: (?={{func_lookahead}})
    push: function-declaration
  - match: (?={{arrow_func_lookahead}})
    push: arrow-function-declaration
  else-pop:
  - match: (?=\S)
    pop: true
  expect-case-colon:
  - match: ':'
    pop: true
    scope: punctuation.separator.js
  - include: else-pop
  export-brace:
  - meta_content_scope: meta.export.js meta.block.js
  - include: export-escape
  - match: \}
    scope: punctuation.section.block.js
    set: export-extended-as
  - match: '{{identifier}}'
    scope: variable.other.readwrite.js
    set: export-brace-as
  - match: \*
    scope: constant.other.js
    set: export-brace-as
  - include: else-pop
  export-brace-as:
  - meta_content_scope: meta.export.js meta.block.js
  - include: export-escape
  - captures:
      1: keyword.control.import-export.js
      2: keyword.control.import-export.js
    match: \b(as)\s+(default)\b
  - captures:
      1: keyword.control.import-export.js
      2: variable.other.readwrite.js
    match: \b(as)\b(\s+(?:{{identifier}}))?
  - match: (?=\S)
    set: export-brace-continue
  export-brace-continue:
  - meta_scope: meta.export.js meta.block.js
  - include: export-escape
  - match: (?=\})
    set: export-brace
  - match: ','
    scope: punctuation.separator.comma.js
    set: export-brace
  - include: else-pop
  export-escape:
  - match: (?=;|function|var|class)
    pop: true
  - match: (?='|"|\bfrom\b)
    set: export-final
  export-extended:
  - meta_content_scope: meta.export.js
  - include: variable-declaration
  - include: export-escape
  - match: \bdefault\b
    push:
    - match: (?=class)
      set: class
    - match: (?=function)
      set: function-declaration
    - include: expression
    scope: keyword.control.import-export.js
  - match: \{
    scope: meta.block.js punctuation.section.block.js
    set: export-brace
  - match: \*
    scope: constant.other.js
    set: export-extended-as
  - include: else-pop
  export-extended-as:
  - meta_content_scope: meta.export.js
  - include: export-escape
  - captures:
      1: keyword.control.import-export.js
      2: variable.other.readwrite.js
    match: \b(as)(?:\s+({{identifier}}))?
  - match: (?=\S)
    set: export-extended-continue
  export-extended-continue:
  - meta_scope: meta.export.js
  - include: export-escape
  - match: ','
    scope: punctuation.separator.comma.js
    set: export-extended
  - include: else-pop
  export-final:
  - meta_scope: meta.export.js
  - match: \bfrom\b
    scope: keyword.control.import-export.js
  - match: (?=['"])
    push: literal-string
  - include: else-pop
  expression:
  - match: (?=\S)
    set:
    - expression-end
    - expression-begin
  expression-begin:
  - include: jsx-tag
  - match: \)
    pop: true
    scope: invalid.illegal.stray-bracket-end
  - include: expression-break
  - include: literal-prototype
  - include: regexp-complete
  - include: literal-string
  - include: literal-string-template
  - include: constructor
  - include: prefix-operators
  - include: class
  - include: constants
  - include: named-function
  - include: anonymous-function
  - include: object-literal
  - include: parenthesized-expression
  - include: array-literal
  - include: literal-number
  - include: literal-call
  - include: literal-variable
  - include: else-pop
  expression-break:
  - match: (?=[;})\]])
    pop: true
  expression-end:
  - include: expression-break
  - include: postfix-operators
  - include: binary-operators
  - include: ternary-operator
  - include: bracketed-property-access
  - include: function-call
  - include: literal-punctuation
  - include: fallthrough
  - include: else-pop
  expression-end-no-comma:
  - match: (?=,)
    pop: true
  - include: expression-end
  expression-list:
  - include: expression-break
  - include: comma-separator
  - match: (?=\S)
    push: expression-no-comma
  expression-no-comma:
  - match: (?=\S)
    set:
    - expression-end-no-comma
    - expression-begin
  expression-statement:
  - match: (?=\S)
    set:
    - expression-statement-end
    - expression-begin
  expression-statement-end:
  - match: \n
    set:
    - match: '{{line_continuation_lookahead}}'
      set: expression-statement-end
    - include: else-pop
  - include: expression-end
  fallthrough:
  - match: =>
    scope: storage.type.function.arrow.js
  function-block:
  - meta_scope: meta.block.js
  - match: \}
    pop: true
    scope: punctuation.section.block.js
  - match: \{
    push:
    - match: (?=\})
      pop: true
    - include: statements
    scope: punctuation.section.block.js
  function-call:
  - match: \(
    push:
    - meta_scope: meta.group.js
    - match: \)
      pop: true
      scope: punctuation.section.group.js
    - match: (?=\S)
      push: expression
    scope: punctuation.section.group.js
  function-call-params:
  - match: \)
    pop: true
    scope: meta.group.js punctuation.section.group.js
  - match: \(
    push:
    - meta_scope: meta.group.js
    - match: (?=\))
      pop: true
    - captures:
        1: punctuation.separator.comma.js
      match: (,)\s+
    - match: (?=\S)
      push: expression-no-comma
    scope: punctuation.section.group.js
  function-declaration:
  - captures:
      1: storage.type.js
    match: \b(async)\b\s*
    scope: meta.function.declaration.js
  - captures:
      1: storage.type.function.js
      2: keyword.generator.asterisk.js
    match: \b(function)\b(\*)?\s*
    scope: meta.function.declaration.js
  - match: '{{identifier}}'
    scope: meta.function.declaration.js entity.name.function.js
  - include: function-declaration-parameters
  - match: (?=\s*\{)
    set: function-block
  function-declaration-final-identifier:
  - match: (?={{identifier}}\s*(=)\s*)
    push:
    - match: '{{dollar_only_identifier}}'
      scope: meta.property.object.dollar.only.js punctuation.dollar.js entity.name.function.js
    - captures:
        1: punctuation.dollar.js
      match: '{{dollar_identifier}}'
      scope: meta.property.object.dollar.js entity.name.function.js
    - match: '{{identifier}}'
      scope: meta.property.object.js entity.name.function.js
    - captures:
        1: keyword.operator.assignment.js
      match: \s*(=)\s*
      pop: true
  function-declaration-identifiers:
  - match: (?={{identifier}}\s*\.)
    push:
    - match: \bprototype\b
      scope: support.constant.prototype.js
    - include: language-identifiers
    - match: '{{dollar_only_identifier}}'
      scope: support.class.dollar.only.js punctuation.dollar.js
    - captures:
        1: punctuation.dollar.js
      match: '{{dollar_identifier}}'
      scope: support.class.dollar.js
    - match: '{{identifier}}'
      scope: support.class.js
    - match: \.
      pop: true
      scope: punctuation.accessor.js
  - include: function-declaration-final-identifier
  function-declaration-parameters:
  - match: \(
    push:
    - meta_scope: meta.function.declaration.js
    - match: \)
      pop: true
      scope: punctuation.section.group.end.js
    - match: \{
      push:
      - meta_scope: meta.block.js
      - match: \}
        pop: true
        scope: punctuation.section.block.end.js
      - match: '{{identifier}}'
        scope: variable.parameter.function.js
      - match: ','
        scope: punctuation.separator.parameter.function.js
      - match: '='
        push:
        - meta_scope: meta.parameter.optional.js
        - match: (?=[,)}])
          pop: true
        - match: (?=\S)
          push: expression-no-comma
        scope: keyword.operator.assignment.js
      scope: punctuation.section.block.begin.js
    - match: \.\.\.
      scope: keyword.operator.spread.js
    - match: '{{identifier}}'
      scope: variable.parameter.function.js
    - match: ','
      scope: punctuation.separator.parameter.function.js
    - match: '='
      push:
      - meta_scope: meta.parameter.optional.js
      - match: (?=[,)])
        pop: true
      - match: (?=\S)
        push: expression-no-comma
      scope: keyword.operator.assignment.js
    scope: punctuation.section.group.begin.js
  function-declaration-single-identifier:
  - captures:
      1: keyword.operator.assignment.js
    match: \s*(=)\s*
  - match: (?={{identifier}})
    push:
    - match: '{{dollar_only_identifier}}'
      scope: variable.other.dollar.only.js punctuation.dollar.js entity.name.function.js
    - captures:
        1: punctuation.dollar.js
      match: '{{dollar_identifier}}'
      scope: variable.other.dollar.js entity.name.function.js
    - match: '{{constant_identifier}}'
      scope: variable.other.constant.js entity.name.function.js
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js entity.name.function.js
    - match: (?=.)
      pop: true
  function-or-class-declaration:
  - match: (?=class)
    push: class
  - match: (?=function)
    push: named-function
  import-brace:
  - meta_content_scope: meta.import.js meta.block.js
  - include: import-escape
  - match: \}
    scope: punctuation.section.block.js
    set: import-extended-as
  - match: '{{identifier}}'
    scope: variable.other.readwrite.js
    set: import-brace-as
  - match: \*
    scope: constant.other.js
    set: import-brace-as
  - include: else-pop
  import-brace-as:
  - meta_content_scope: meta.import.js meta.block.js
  - include: import-escape
  - captures:
      1: keyword.control.import-export.js
      2: variable.other.readwrite.js
    match: \b(as)\b(\s+(?:{{identifier}}))?
  - match: (?=\S)
    set: import-brace-continue
  import-brace-continue:
  - meta_scope: meta.import.js meta.block.js
  - include: import-escape
  - match: (?=\})
    set: import-brace
  - match: ','
    scope: punctuation.separator.comma.js
    set: import-brace
  - include: else-pop
  import-escape:
  - match: (?=;|function|var|class)
    pop: true
  - match: (?='|"|\bfrom\b)
    set: import-final
  import-extended:
  - meta_content_scope: meta.import.js
  - include: import-escape
  - match: \{
    scope: meta.block.js punctuation.section.block.js
    set: import-brace
  - match: '{{identifier}}'
    scope: variable.other.readwrite.js
    set: import-extended-as
  - match: \*
    scope: constant.other.js
    set: import-extended-as
  - include: else-pop
  import-extended-as:
  - meta_content_scope: meta.import.js
  - include: import-escape
  - captures:
      1: keyword.control.import-export.js
      2: variable.other.readwrite.js
    match: \b(as)(?:\s+({{identifier}}))?
  - match: (?=\S)
    set: import-extended-continue
  import-extended-continue:
  - meta_scope: meta.import.js
  - include: import-escape
  - match: ','
    scope: punctuation.separator.comma.js
    set: import-extended
  - include: else-pop
  import-final:
  - meta_scope: meta.import.js
  - match: \bfrom\b
    scope: keyword.control.import-export.js
  - match: (?=['"])
    push: literal-string
  - include: else-pop
  jsx-body:
  - match: <
    scope: punctuation.definition.tag.begin.js
    set:
    - meta_scope: meta.tag.js
    - match: /
      scope: punctuation.definition.tag.begin.js
      set:
      - jsx-expect-tag-end
      - jsx-tag-name
    - match: (?=\S)
      set:
      - jsx-body
      - jsx-tag-attributes
      - jsx-tag-name
  - match: ''
    push:
    - meta_include_prototype: false
    - include: jsx-interpolation
    - match: (?=<)
      pop: true
  jsx-expect-tag-end:
  - match: '>'
    pop: true
    scope: punctuation.definition.tag.end.js
  - include: else-pop
  jsx-interpolation:
  - match: '{'
    push:
    - - meta_scope: meta.jsx-interpolation.js
      - match: '}'
        pop: true
        scope: punctuation.section.braces.begin.js
    - expression
    scope: punctuation.section.braces.begin.js
  jsx-tag:
  - match: <
    scope: punctuation.definition.tag.begin.js
    set:
    - meta_scope: meta.tag.js
    - match: /
      set:
      - - meta_scope: invalid.illegal.unmatched-tag.js
        - include: else-pop
      - jsx-expect-tag-end
      - jsx-tag-name
    - match: (?=\S)
      set:
      - jsx-tag-attributes
      - jsx-tag-name
  jsx-tag-attributes:
  - meta_scope: meta.tag.js
  - match: '>'
    scope: punctuation.definition.tag.end.js
    set: jsx-body
  - match: /
    scope: punctuation.definition.tag.end.js
    set: jsx-expect-tag-end
  - include: jsx-interpolation
  - match: '{{jsx_identifier}}'
    scope: entity.other.attribute-name.js
  - match: '='
    scope: punctuation.separator.key-value.js
  - match: (?=['"])
    push: literal-string
  jsx-tag-name:
  - match: '{{jsx_identifier}}'
    pop: true
    scope: entity.name.tag.js
  - include: else-pop
  keywords-top-level:
  - match: \bimport\b
    push: import-extended
    scope: meta.import.js keyword.control.import-export.js
  - match: \bexport\b
    push: export-extended
    scope: meta.export.js keyword.control.import-export.js
  - match: \b(export|default|from|as)\b
    scope: keyword.control.import-export.js
  label:
  - captures:
      1: entity.name.label.js
      2: punctuation.separator.js
    match: ({{identifier}})\s*(:)
  language-identifiers:
  - match: \b(arguments)\b
    pop: true
    scope: variable.language.arguments.js
  - match: \b(super)\b
    pop: true
    scope: variable.language.super.js
  - match: \b(this)\b
    pop: true
    scope: variable.language.this.js
  - match: \b(self)\b
    pop: true
    scope: variable.language.self.js
  literal-call:
  - match: (\$)(?=\s*\()
    scope: variable.function.js variable.other.dollar.only.js punctuation.dollar.js
    set:
    - meta_scope: meta.function-call.js
    - include: function-call-params
  - match: \b(clearTimeout|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|setTimeout|super|unescape)\b(?=\()
    scope: support.function.js
    set:
    - meta_scope: meta.function-call.js
    - include: function-call-params
  - match: ({{identifier}})(?=\s*\()
    scope: variable.function.js
    set:
    - meta_scope: meta.function-call.js
    - include: function-call-params
  - match: (?={{identifier}}\s*\.\s*{{identifier}}\s*\()
    set:
    - captures:
        1: support.type.object.console.js
        2: punctuation.accessor.js
        3: support.function.console.js
      match: \b(console)(?:(\.)(warn|info|log|error|time|timeEnd|assert|count|dir|group|groupCollapsed|groupEnd|profile|profileEnd|table|trace|timeStamp))?\b
      set:
      - meta_scope: meta.function-call.method.js
      - include: function-call-params
    - captures:
        1: support.type.object.process.js
        2: punctuation.accessor.js
        3: support.function.process.js
      match: \b(process)(?:(\.)(abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?\b
      set:
      - meta_scope: meta.function-call.method.js
      - include: function-call-params
    - match: (?={{identifier}}\s*\.)
      push:
      - include: well-known-identifiers
      - include: language-identifiers
      - match: '{{dollar_only_identifier}}'
        scope: variable.other.object.dollar.only.js punctuation.dollar.js
      - captures:
          1: punctuation.dollar.js
        match: '{{dollar_identifier}}'
        scope: variable.other.object.dollar.js
      - match: '{{identifier}}'
        scope: variable.other.object.js
      - match: \.
        pop: true
        scope: punctuation.accessor.js
    - match: \.
      scope: punctuation.accessor.js
    - include: method-call
    - match: (?=[^ ])
      pop: true
  literal-number:
  - match: (?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)
    pop: true
    scope: invalid.illegal.numeric.hex.js
  - match: (?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)
    pop: true
    scope: invalid.illegal.numeric.octal.js
  - match: "(?xi)\n(?:\\B[-+])?\n(?:\n  \\b0b[0-1]*|                 # binary\n  \\\
      b0o[0-7]*|                 # octal\n  \\b0x[0-9a-f]*|              # hex\n \
      \ (\n    \\B\\.[0-9]+|               # e.g. .999\n    \\b[0-9]+(\\.[0-9]*)?\
      \       # e.g. 999.999, 999. or 999\n  )(e[-+]?[0-9]+)?            # e.g. e+123,\
      \ E-123\n)"
    pop: true
    scope: constant.numeric.js
  - match: (?:\B[-+]|\b)(Infinity)\b
    pop: true
    scope: constant.language.infinity.js
  literal-prototype:
  - captures:
      1: support.class.js
      2: punctuation.accessor.js
      3: support.constant.prototype.js
    match: ({{identifier}})\s*(\.)\s*(prototype)(?=\s*=\s*({{func_lookahead}}|{{arrow_func_lookahead}}))
    scope: meta.prototype.declaration.js
    set:
    - meta_scope: meta.function.declaration.js
    - captures:
        1: keyword.operator.assignment.js
      match: \s*(=)\s*
    - match: (?={{func_lookahead}})
      set: function-declaration
    - match: (?={{arrow_func_lookahead}})
      set: arrow-function-declaration
    - match: (?=.|\n)
      pop: true
  - captures:
      1: support.class.js
      2: punctuation.accessor.js
      3: support.constant.prototype.js
      4: punctuation.accessor.js
    match: ({{identifier}})\s*(\.)\s*(prototype)\s*(\.)\s*(?={{identifier}}\s*=\s*({{func_lookahead}}|{{arrow_func_lookahead}}))
    set:
    - meta_scope: meta.function.declaration.js
    - match: (?={{func_lookahead}})
      set: function-declaration
    - match: (?={{arrow_func_lookahead}})
      set: arrow-function-declaration
    - include: function-declaration-final-identifier
  - captures:
      1: support.class.js
      2: punctuation.accessor.js
      3: support.constant.prototype.js
    match: ({{identifier}})(\.)(prototype)\b
    pop: true
    scope: meta.prototype.access.js
  literal-punctuation:
  - match: \.
    push:
    - match: (?=({{identifier}})\s*(=)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))
      set:
      - meta_scope: meta.function.declaration.js
      - match: (?={{func_lookahead}})
        set: function-declaration
      - match: (?={{arrow_func_lookahead}})
        set: arrow-function-declaration
      - include: function-declaration-final-identifier
    - match: (?={{identifier}}\s*\()
      set:
      - include: method-call
      - match: (?=.|\n)
        pop: true
    - include: object-property
    scope: punctuation.accessor.js
  - match: ','
    push: expression-begin
    scope: punctuation.separator.comma.js
  literal-string:
  - match: ''''
    scope: punctuation.definition.string.begin.js
    set:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.js
    - captures:
        1: punctuation.definition.string.end.js
        2: invalid.illegal.newline.js
      match: (')|(\n)
      pop: true
    - include: string-content
  - captures:
      0: punctuation.definition.string.begin.js
    match: '"'
    set:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.js
    - captures:
        1: punctuation.definition.string.end.js
        2: invalid.illegal.newline.js
      match: (")|(\n)
      pop: true
    - include: string-content
  literal-string-template:
  - captures:
      1: variable.function.tagged-template.js
      2: punctuation.definition.string.template.begin.js
    match: ({{identifier}})?(`)
    set:
    - meta_include_prototype: false
    - meta_scope: string.template.js
    - match: '`'
      pop: true
      scope: punctuation.definition.string.template.end.js
    - captures:
        0: punctuation.definition.template-expression.begin.js
      match: \$\{
      push:
      - clear_scopes: 1
      - meta_scope: meta.template.expression.js
      - meta_content_scope: source.js.embedded.expression
      - match: \}
        pop: true
        scope: punctuation.definition.template-expression.end.js
      - match: (?=\S)
        push: expression
    - include: string-content
  literal-variable:
  - include: well-known-identifiers
  - include: language-identifiers
  - include: dollar-identifiers
  - include: support
  - match: \b[[:upper:]][_$[:alnum:]]*(?=\s*[\[.])
    pop: true
    scope: support.class.js
  - match: '{{identifier}}(?=\s*[\[.])'
    pop: true
    scope: variable.other.object.js
  - include: simple-identifiers
  main:
  - include: comments
  - include: comments-top-level
  - include: keywords-top-level
  - include: statements
  meta-constructor:
  - meta_scope: meta.instance.constructor.js
  - include: else-pop
  meta-object-literal-key:
  - meta_scope: meta.object-literal.key.js
  - include: else-pop
  method-call:
  - match: \b(shift|sort|splice|unshift|pop|push|reverse|copyWithin|fill)\b(?=\()
    scope: support.function.mutator.js
    set:
    - meta_scope: meta.function-call.method.js
    - include: function-call-params
  - match: \b(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)\b(?=\()
    scope: support.function.dom.js
    set:
    - meta_scope: meta.function-call.method.js
    - include: function-call-params
  - match: ({{identifier}})\s*(?=\()
    scope: variable.function.js
    set:
    - meta_scope: meta.function-call.method.js
    - include: function-call-params
  method-declaration:
  - meta_scope: meta.function.declaration.js
  - captures:
      1: storage.type.accessor.js
    match: \b(get|set)\b(?!\s*\()\s*
    scope: meta.function.declaration.js
  - captures:
      1: keyword.generator.asterisk.js
    match: (\*)\s*
    scope: meta.function.declaration.js
  - captures:
      1: storage.type.js
    match: \b(static)\b\s*
    scope: meta.function.declaration.js
  - captures:
      1: punctuation.definition.symbol.begin.js
      2: entity.name.function.js
      3: punctuation.definition.symbol.end.js
    match: (\[)({{identifier}}(?:\.{{identifier}}|\.)*)?(\])?\s*(?=$|\()
    push:
    - include: function-declaration-parameters
    - match: \{
      push:
      - meta_scope: meta.block.js
      - match: \}
        pop: true
        scope: punctuation.section.block.js
      - include: statements
      scope: punctuation.section.block.js
    - include: else-pop
    scope: meta.function.declaration.js
  - match: (?={{method_name}}\s*\()
    push:
    - meta_scope: meta.function.declaration.js
    - include: method-name
    - match: \s*
    - include: function-declaration-parameters
    - match: \{
      scope: punctuation.section.block.js
      set:
      - meta_scope: meta.function.declaration.js meta.block.js
      - match: \}
        pop: true
        scope: punctuation.section.block.js
      - include: statements
    - include: else-pop
  method-name:
  - captures:
      1: punctuation.dollar.js
    match: (\$)[_$[:alnum:]]*
    scope: meta.object-literal.key.dollar.js entity.name.function.js
  - match: '{{identifier}}'
    scope: entity.name.function.js
  - match: ''''
    push:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.js
    - meta_content_scope: entity.name.function.js
    - captures:
        1: punctuation.definition.string.end.js
        2: invalid.illegal.newline.js
      match: (')|(\n)
      pop: true
    - include: string-content
    scope: punctuation.definition.string.begin.js
  - match: '"'
    push:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.js
    - meta_content_scope: entity.name.function.js
    - captures:
        1: punctuation.definition.string.end.js
        2: invalid.illegal.newline.js
      match: (")|(\n)
      pop: true
    - include: string-content
    scope: punctuation.definition.string.begin.js
  named-function:
  - match: (?=(({{identifier}})\s*(\.)\s*)+({{identifier}})\s*(=)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))
    set:
    - meta_scope: meta.function.declaration.js
    - match: (?={{func_lookahead}})
      set: function-declaration
    - match: (?={{arrow_func_lookahead}})
      set: arrow-function-declaration
    - include: function-declaration-identifiers
  - match: (?=({{identifier}})\s*(=)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))
    set:
    - meta_scope: meta.function.declaration.js
    - match: (?={{func_lookahead}})
      set: function-declaration
    - match: (?={{arrow_func_lookahead}})
      set: arrow-function-declaration
    - include: function-declaration-single-identifier
  - match: (?={{func_lookahead}}(\s*\*)?\s+{{identifier}})
    set: function-declaration
  object-literal:
  - match: \{
    scope: punctuation.section.block.js
    set:
    - meta_scope: meta.object-literal.js
    - match: \}
      pop: true
      scope: punctuation.section.block.js
    - include: comma-separator
    - match: \[
      push:
      - match: \]
        pop: true
        scope: punctuation.section.brackets.js
      - match: (?=\S)
        push: expression
      scope: punctuation.section.brackets.js
    - match: '{{identifier}}(?=\s*(?:[},]|$|//|/\*))'
      scope: variable.other.readwrite.js
    - match: "(?x)(?=\n  {{method_name}}\\s*:\n  (?: {{func_lookahead}} | {{arrow_func_lookahead}}\
        \ )\n)"
      push:
      - meta_content_scope: meta.object-literal.key.js meta.function.declaration.js
      - include: method-name
      - match: (?=:)
        set:
        - captures:
            1: punctuation.separator.key-value.js
          match: (:)\s*
          scope: meta.function.declaration.js
        - include: either-function-declaration
        - include: else-pop
    - include: method-declaration
    - match: (?="|')
      push:
      - meta_scope: meta.object-literal.key.js
      - include: literal-string
    - captures:
        1: punctuation.dollar.js
      match: (\$)[$\w]*(?=\s*:)
      scope: meta.object-literal.key.dollar.js
    - match: '{{identifier}}(?=\s*:)'
      scope: meta.object-literal.key.js
    - match: (?=[-+]?(?:\.[0-9]|0[bxo]|\d))
      push:
      - meta_scope: meta.object-literal.key.js
      - include: literal-number
    - match: ':'
      push: expression-no-comma
      scope: punctuation.separator.key-value.js
  object-property:
  - match: \b__proto__\b
    pop: true
    scope: variable.language.proto.js
  - match: \bconstructor\b
    pop: true
    scope: variable.language.constructor.js
  - match: \bprototype\b
    pop: true
    scope: variable.language.prototype.js
  - match: '{{dollar_only_identifier}}'
    pop: true
    scope: meta.property.object.dollar.only.js punctuation.dollar.js
  - captures:
      1: punctuation.dollar.js
    match: '{{dollar_identifier}}'
    pop: true
    scope: meta.property.object.dollar.js
  - match: '{{identifier}}'
    pop: true
    scope: meta.property.object.js
  - match: \b(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))\b
    pop: true
    scope: support.constant.dom.js
  - match: (?=.|\n)
    pop: true
  parens-block-scope:
  - match: \(
    push:
    - meta_scope: meta.group.js
    - match: \)
      pop: true
      scope: punctuation.section.group.js
    - match: ;
      scope: punctuation.terminator.statement.js
    - match: \b(const|let|var)\b
      scope: storage.type.js
    - include: expression-list
    scope: punctuation.section.group.js
  - include: block-scope
  parenthesized-expression:
  - match: \(
    scope: punctuation.section.group.js
    set:
    - meta_scope: meta.group.js
    - match: \)
      pop: true
      scope: punctuation.section.group.js
    - match: (?=\S)
      push: expression
  - match: \)
    pop: true
    scope: invalid.illegal.stray-bracket-end.js
  postfix-operators:
  - match: --
    scope: keyword.operator.arithmetic.js
  - match: \+\+
    scope: keyword.operator.arithmetic.js
  prefix-operators:
  - match: '~'
    scope: keyword.operator.bitwise.js
  - match: '!(?!=)'
    scope: keyword.operator.logical.js
  - match: --
    scope: keyword.operator.arithmetic.js
  - match: \+\+
    scope: keyword.operator.arithmetic.js
  - match: \.\.\.
    scope: keyword.operator.spread.js
  - match: \+|\-
    scope: keyword.operator.arithmetic.js
  - match: \bnew\b
    scope: keyword.operator.word.new.js
  - match: \bdelete|typeof|void\b
    scope: keyword.operator.js
  prototype:
  - include: comments
  regexp:
  - meta_include_prototype: false
  - meta_scope: string.regexp.js
  - captures:
      1: punctuation.definition.string.end.js
      2: keyword.other.js
    match: (/)([gimyu]*)
    pop: true
  - match: (?=.|\n)
    push:
    - meta_include_prototype: false
    - match: (?=/)
      pop: true
    - include: scope:source.regexp.js
  regexp-complete:
  - match: /
    scope: punctuation.definition.string.begin.js
    set: regexp
  restricted-production:
  - match: \n
    pop: true
  - match: (?=\S)
    set: expression-statement
  simple-identifiers:
  - match: '{{constant_identifier}}'
    pop: true
    scope: variable.other.constant.js
  - match: '{{identifier}}'
    pop: true
    scope: variable.other.readwrite.js
  statements:
  - match: \;
    scope: punctuation.terminator.statement.js
  - include: conditional
  - match: \{
    push:
    - meta_scope: meta.block.js
    - match: \}
      pop: true
      scope: punctuation.section.block.js
    - include: statements
    scope: punctuation.section.block.js
  - include: label
  - include: variable-declaration
  - match: \bthrow\b
    push: restricted-production
    scope: keyword.control.trycatch.js
  - match: \b(break|continue|goto)\b
    scope: keyword.control.loop.js
  - captures:
      1: keyword.control.flow.js
      2: keyword.generator.asterisk.js
    match: \b(yield)\b(?:\s*(\*))?
    push: restricted-production
  - match: \b(await|return)\b
    push: restricted-production
    scope: keyword.control.flow.js
  - include: function-or-class-declaration
  - match: (?=\S)
    push: expression-statement
  string-content:
  - match: \\\s*\n
    scope: constant.character.escape.newline.js
  - match: \\(x[\da-fA-F][\da-fA-F]|u[\da-fA-F][\da-fA-F][\da-fA-F][\da-fA-F]|.)
    scope: constant.character.escape.js
  support:
  - match: \bdebugger\b
    pop: true
    scope: keyword.other.js
  - match: "(?x)\n\\b(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n\
      \  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n\
      \  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n\
      )\\b"
    pop: true
    scope: support.constant.dom.js
  - match: \b(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)\b
    pop: true
    scope: support.module.node.js
  - captures:
      1: support.type.object.process.js
      2: punctuation.accessor.js
      3: support.type.object.process.js
    match: \b(process)(?:(\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?\b
    pop: true
  - captures:
      1: support.type.object.module.js
      2: punctuation.accessor.js
      3: support.type.object.module.js
    match: \b(exports|module(?:(\.)(exports|id|filename|loaded|parent|children))?)\b
    pop: true
  - match: \b(global|GLOBAL|root|__dirname|__filename)\b
    pop: true
    scope: support.type.object.node.js
  ternary-operator:
  - match: \?
    scope: keyword.operator.ternary.js
    set:
    - - match: ':'
        scope: keyword.operator.ternary.js
        set: expression
      - include: else-pop
    - expression
  variable-declaration:
  - match: \b(const|let|var)\b
    push: expression-statement
    scope: storage.type.js
  well-known-identifiers:
  - match: \b(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)\b
    pop: true
    scope: support.class.builtin.js
  - match: \b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b
    pop: true
    scope: support.class.error.js
  - match: \b(document|window|navigator)\b
    pop: true
    scope: support.type.object.dom.js
  - match: \b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b
    pop: true
    scope: support.class.node.js
file_extensions:
- js
- htc
first_line_match: ^#!\s*/.*\b(node|js)\b
name: JSX (YAML Macros example)
scope: source.js
variables:
  arrow_func_lookahead: \s*(\basync\s*)?([_$[:alpha:]][_$[:alnum:]]*|\(([^()]|\([^()]*\))*\))\s*=>
  constant_identifier: '[[:upper:]][_$[:digit:][:upper:]]*\b'
  dollar_identifier: (\$)[_$[:alnum:]]+
  dollar_only_identifier: \$(?![_$[:alnum:]])
  func_lookahead: \s*\b(async\s+)?function\b
  identifier: '[_$[:alpha:]][_$[:alnum:]]*'
  jsx_identifier: '[_$[:alpha:]][-_$[:alnum:]]*'
  line_continuation_lookahead: "(?x) (?! \\+\\+ | -- ) (?=\n  != |\n  [ -+*/% ><=\
    \ &|^ \\[( ;,.:? ]\n)"
  method_name: "(?x)(?:\n  {{identifier}}\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\
    \\\"]|\\\\.)*\"\n)"
