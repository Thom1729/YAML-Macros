%YAML 1.2
---
contexts:
  comments:
  - captures:
      1: punctuation.definition.comment.sql
    match: (--).*
    scope: comment.line.sql
  else-pop:
  - match: (?=\S)
    pop: true
  expression:
  - match: (?=\S)
    set: !!python/tuple
    - expression-tail
    - expression-head
  expression-head:
  - match: \*
    pop: true
    scope: keyword.other.star.sql
  - include: variable
  - include: literal-number
  - include: else-pop
  expression-tail:
  - include: infix-operators
  - include: else-pop
  infix-operators:
  - match: '[-+*/]'
    push: expression-head
    scope: keyword.operator.numeric.sql
  literal-number:
  - match: \b\d+\b
    pop: true
    scope: constant.numeric.sql
  main:
  - match: ;
    scope: punctuation.terminator.statement.sql
  - match: (?=\S)
    push: query
  prototype:
  - include: comments
  query:
  - meta_scope: meta.query.sql
  - match: (?=(?:;))
    pop: true
  - match: (?:\b(?i:select)\b)
    push:
    - - meta_scope: meta.select.sql
      - match: ''
        pop: true
    - select-list
    - - match: (?:\b(?i:distinct)\b)
        pop: true
        scope: keyword.other.sql
      - match: (?=\S)
        pop: true
    scope: keyword.other.select.sql
  - match: (?:\b(?i:from)\b)
    push:
    - - meta_scope: meta.from.sql
      - match: ''
        pop: true
    - - match: '{{var_name}}'
        pop: true
        scope: variable.other.table.sql
      - match: '"'
        scope: punctuation.definition.string.begin.sql
        set:
        - meta_scope: meta.string.sql
        - meta_content_scope: variable.other.table.sql
        - match: '"'
          pop: true
          scope: punctuation.definition.string.end.sql
      - match: (?=\S)
        pop: true
    scope: keyword.other.from.sql
  select-list:
  - match: (?=\S)
    set: !!python/tuple
    - select-list-rest
    - select-list-item
  select-list-item:
  - match: (?=\S)
    set: !!python/tuple
    - - meta_scope: meta.select-item.sql
      - match: ''
        pop: true
    - - match: '{{var_name}}'
        pop: true
        scope: entity.name.alias.sql
      - match: '"'
        scope: punctuation.definition.string.begin.sql
        set:
        - meta_scope: meta.string.sql
        - meta_content_scope: entity.name.alias.sql
        - match: '"'
          pop: true
          scope: punctuation.definition.string.end.sql
      - match: (?=\S)
        pop: true
    - - match: (?:\b(?i:as)\b)
        pop: true
        scope: keyword.other.sql
      - match: (?=\S)
        pop: true
    - expression
  select-list-rest:
  - match: ','
    push: select-list-item
    scope: punctuation.separator.comma.sql
  - include: else-pop
  variable:
  - match: '{{var_name}}'
    pop: true
    scope: variable.other.table.sql
  - match: '"'
    scope: punctuation.definition.string.begin.sql
    set:
    - meta_scope: meta.string.sql
    - meta_content_scope: variable.other.table.sql
    - match: '"'
      pop: true
      scope: punctuation.definition.string.end.sql
name: SQL (YAML Macros example)
scope: source.sql
variables:
  identifier: \b[A-Za-z_]\w*\b
  reserved_words: (?:\b(?i:select|distinct|from|as)\b)
  var_name: (?:(?!{{reserved_words}}){{identifier}})
